@startuml 

title Component diagram

top to bottom direction
!include <C4/C4_Component>

Person(user, "Пользователь")
Person(employee, "Тех. поддержка", "специалист техподдержки")
UpdateRelStyle($lineColor=black, &textColor=$COLOR_REL_TEXT)

System(EcoSmartSystem, "Умный Дом") {
    ContainerDb(db1, "database", "postgres", "состояния устройств, регистрационные данные")
    ContainerDb(db2, "database", "postgres", "телеметрия, команды")
    ContainerQueue(q, "queue", "kafka", "очередь команд")
    Container(api, "CustomerService", "Fastapi app", "") {
        Component(CustomerController, "CustomerController", "FastAPI router","обработка запросов пользователей")
        Component(CustomerService, "CustomerService", "python module", "бизнес-логика")
        Component(DeviceRepository, "DeviceRepository", "python, sqlalchemy", "работа с данными")
        Component(TelemetryRepository, "TelemetryRepository", "python, sqlalchemy", "работа с данными")
        Component(CommandQueue, "CommandQueue", "python, aiokafka", "логика публикации команд")
        Rel_Down(CustomerController, CustomerService, "бизнес-логика")
        Rel_Down(CustomerService, DeviceRepository, "читает и пишет данные")
        Rel_Down(CustomerService, TelemetryRepository, "читает данные")
        Rel_Down(CustomerService, CommandQueue, "produce-логика")
        Rel_Down(CommandQueue, q, "публикует команды")
        Rel_Down(DeviceRepository, db1, "читает и пишет пользовательские данные")
        Rel_Down(TelemetryRepository, db2, "читает телеметрию")
    }
    Container(helpdesk, "HelpdeskService", "Fastapi app", "") {
        Component(HelpdeskController, "HelpdeskController", "FastAPI router","хелпдеск")
        Component(HelpdeskService, "HelpdeskService", "python module", "бизнес-логика")
        Component(DeviceRepositoryAdmin, "DeviceRepositoryAdmin", "python, sqlalchemy", "работа с данными")
        Rel_Down(HelpdeskController, HelpdeskService, "бизнес-логика")
        Rel_Down(HelpdeskService, DeviceRepositoryAdmin, "читает и пишет данные")
        Rel_Down(DeviceRepositoryAdmin, db1, "читает и пишет пользовательские данные")
    }
    Container(worker, "DeviceConnectivity", "python app") {
        Component(Consumer, "Consumer", "python, aiokafka","процессинг очереди команд")
        Component(DeviceRepository2, "DeviceRepository", "python, sqlalchemy", "работа с данными")
        Component(TelemetryRepository2, "TelemetryRepository", "python, sqlalchemy", "работа с данными")
        Component(connector, "Connector[DeviceType]", "python, aiohttp", "взаимодействие с устройствами")
        Rel_Down(q, Consumer, "обрабатывает очередь сообщений")
        Rel_Down(Consumer, DeviceRepository2, "пишет данные")
        Rel_Down(Consumer, TelemetryRepository2, "пишет данные")
        Rel_Down(Consumer, connector, "отправляет команды, читает телеметрию")
        Rel_Down(DeviceRepository2, db1, "читает и пишет пользовательские данные")
        Rel_Down(TelemetryRepository2, db2, "пишет телеметрию")
    }
}

System_Boundary(House, "Дом") {
    System_Ext(module, "Модуль", "управляет устройствами, снимает показания")
}

Rel_D(connector, House, "<color:black>взаимодействует с устройствами")
Rel(user, api, "<color:black>управляет устройствами, просматривает показания")
Rel(employee, helpdesk, "<color:black>оказывает техподдержку с помощью")

@enduml